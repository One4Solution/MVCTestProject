@*@model IEnumerable<Project.MVC.Models.VehicleMakeViewModel>*@
@model  Project.MVC.HelpClasses.Pagination<VehicleModelViewModel>
@{
    ViewData["Title"] = "Index";
}

<h1>Index</h1>


<div>
    <p>
        <a asp-action="Create" asp-controller="VehicleModel" class="btn btn-primary">Create</a>
    </p>
</div>

@{
    var clearDisabled = ViewData["SearchFilter"] != null ? "" : "disabled";
}

<form asp-action="Index" method="get">
    <div class="form-actions no-color">
        <p>
            <input type="text" name="SearchString" value="@ViewData["SearchFilter"]" />
            <input type="submit" value="Search" class="btn btn-secondary" /> |
            <input type="submit" value="Clear" class="btn btn-secondary @clearDisabled" name="clearSearch" />
            <select id="selection" @*asp-for=""*@ asp-action="Index">
                <option value="2" name="test">2</option>
                <option value="4" name="test">4</option>
                <option value="8" name="test">8</option>
            </select>
        </p>
    </div>
</form>


<table class="table">
    <thead>
        <tr>
            <th>
                @Html.DisplayName("Name")
                @*@Html.DisplayNameFor(model => model.Name)*@
                <a asp-action="Index" asp-route-sortOrder="@ViewData["NameSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]"><i class="fas fa-sort fa-lg"></i></a>
            </th>
            <th>
                @Html.DisplayName("Abbreviation")
                @*@Html.DisplayNameFor(model => model.Abbreviation)*@
                <a asp-action="Index" asp-route-sortOrder="@ViewData["AbrvSortParm"]" asp-route-currentFilter="@ViewData["CurrentFilter"]"><i class="fas fa-sort fa-lg"></i></a>
            </th>
        </tr>
    </thead>
    <tbody>
        @foreach (var item in Model)
        {
        <tr>
            <td>
                Create filter by Vehicle Make
                @Html.DisplayFor(modelItem => item.VehicleMakeId)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Name)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Abbreviation)
            </td>

            <td>
                @*<button type="button" class="btn btn-primary" onclick="location.href='@Url.Action("Edit", "Car")/'+@item.CarId" >Edit</button>*@
                <a asp-action="Edit" asp-route-id="@item.Id"><i class="far fa-edit fa-lg"></i></a> |
                @*<a asp-action="Details" asp-route-id="@item.Id"><i class="fas fa-clipboard fa-lg"></i></a> |*@
                <a asp-action="Delete" asp-route-id="@item.Id"><i class="fas fa-eraser fa-lg"></i></a>
            </td>
        </tr>
        }
    </tbody>
</table>

@{
    var prevDisabled = !Model.HasPreviousPage ? "disabled" : "";
    var nextDisabled = !Model.HasNextPage ? "disabled" : "";
}

<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex - 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @prevDisabled">
    Previous
</a>
<a asp-action="Index"
   asp-route-sortOrder="@ViewData["CurrentSort"]"
   asp-route-pageNumber="@(Model.PageIndex + 1)"
   asp-route-currentFilter="@ViewData["CurrentFilter"]"
   class="btn btn-default @nextDisabled">
    Previous
</a>


